#!/usr/bin/env bash
# set -u
export TERM="xterm-256color"

WWW_DIR=""
WWW_USER=""
DATA_DIR="/var/lib/motionui"
CONFIRM=""
PWD=$(pwd)
ASSUME_YES="false"

# Colors
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# Detecting user
if [ "$(id -u)" -ne "0" ];then
    echo -e "\n${YELLOW}Must be executed with sudo ${RESET}\n"
    exit
fi

function help
{
    echo -e "\n   Available parameters:"
    echo -e "   -i | --install          ➤  Execute Motion-UI installation wizard."
    echo -e "   -p | --set-permissions  ➤  Set necessary permissions on Motion-UI directories and files."
    echo -e "   -s | --deploy-service   ➤  Deploy Motion-UI service.\n\n\n"
}

function askPath
{
    if [ -z "$WWW_DIR" ];then
        echo -ne "➤ Please specify motion-UI installation path (leave empty to use /var/www/motionui): "; read -p "" WWW_DIR
    fi

    if [ -z "$WWW_DIR" ];then
        WWW_DIR="/var/www/motionui"
    fi

    if [ ! -d "$WWW_DIR" ];then
        echo -e "[$YELLOW ERROR $RESET] Cannot find ${YELLOW}${WWW_DIR}${RESET} directory..."
        exit
    fi
}

# Detect or ask for webserver user
function detectWebUser
{
    while [ -z "$WWW_USER" ];do
        # Try to detect web user
        if grep -q "^nginx:" /etc/passwd;then
            WWW_USER="nginx"
        elif grep -q "^www-data:" /etc/passwd;then
            WWW_USER="www-data"
        elif grep -q "^apache:" /etc/passwd;then
            WWW_USER="apache"
        fi
        # Si more than one web users are detected then variable is leaved empty. User will have to manualy specify which web user to use.
        if egrep -q "^nginx:" /etc/passwd && egrep -q "^www-data:" /etc/passwd && egrep -q "^apache:" /etc/passwd;then
            WWW_USER=""
        fi

        if [ "$ASSUME_YES" == "false" ];then
            if [ ! -z "$WWW_USER" ];then
                echo -e "\n➤ Specifying webserver user (detected: $WWW_USER)"
                echo -ne "  Leave empty to use ${YELLOW}${WWW_USER}${RESET} or specify a user: "; read -p "" PROMPT
                if [ ! -z "$PROMPT" ];then
                    WWW_USER="$PROMPT"
                fi
            else
                while [ -z "$WWW_USER" ];do
                    echo -ne "\n➤ Specifying webserver user (generally nginx or www-data): "; read -p "" WWW_USER
                done
            fi
        fi
    done
}

# Deploy motionui systemd service
function deployService
{
    if [ "$ASSUME_YES" == "false" ];then
        echo -ne "\n  Deploy Motion-UI's service now (yes/no): "; read -p "" CONFIRM
        if [ "$CONFIRM" != "yes" ];then
            return
        fi
    fi

    # askPath

    # Exit function if services files cannot be found
    if [ ! -f "${DATA_DIR}/tools/service/motionui.systemd.template" ];then
        echo -e "[$YELLOW ERROR $RESET] Systemd template service file ${YELLOW}${DATA_DIR}/tools/service/motionui.systemd.template${RESET} does not exist..."
        exit
    fi
    if [ ! -f "${DATA_DIR}/tools/service/motionui-service" ];then
        echo -e "[$YELLOW ERROR $RESET] Motion-UI service script ${YELLOW}${DATA_DIR}/tools/service/motionui-service${RESET} does not exist..."
        exit
    fi

    # Deploy systemd service template file
    echo -ne "\n➤ Deploying service... "
    \cp "$DATA_DIR/tools/service/motionui.systemd.template" /lib/systemd/system/motionui.service &&
    ln -fs /lib/systemd/system/motionui.service /etc/systemd/system/motionui.service &&
    chmod 700 "${DATA_DIR}/tools/service/motionui-service"
    echo -e "${GREEN}Done${RESET}"

    systemctl daemon-reload --quiet
    systemctl enable motionui --quiet
}

# Set correct permissions on all directories and files used by motionui
function permissions
{
    ACTUAL_USER=$(whoami)

    askPath

    detectWebUser

    echo -ne "\n${YELLOW} Setting permissions... ${RESET}"

    # Setting permissions only if sudo/root
    if [ "$ACTUAL_USER" == "root" ];then
        # Permissions on web directory
        find "$WWW_DIR" -type f -exec chmod 0660 {} \;
        find "$WWW_DIR" -type d -exec chmod 0770 {} \;
        find "$DATA_DIR" -type f -exec chmod 0660 {} \;
        find "$DATA_DIR" -type d -exec chmod 0770 {} \;

        chmod 750 "$WWW_DIR"
        chmod 770 "$DATA_DIR"

        chown -R ${WWW_USER}:motionui "$WWW_DIR"
        chown -R ${WWW_USER}:motionui "$DATA_DIR"

        chmod 550 ${DATA_DIR}/motionui
        chmod 550 ${DATA_DIR}/tools/service/motionui-service
        chmod 550 ${DATA_DIR}/tools/event

        find "/etc/motion" -type f -exec chmod 0660 {} \;
        find "/etc/motion" -type d -exec chmod 0770 {} \;
        chown -R motion:motionui /etc/motion
    fi

    echo -e "${GREEN}OK${RESET}\n"
}

# Installation wizard
function installation
{
    echo -e " ${YELLOW}Welcome to Motion-UI setup wizard${RESET}\n"

    #### INSTALLATION ####

    echo -e "➤ Motion-UI data files will be stored in ${DATA_DIR}/. Please do not remove or move this directory."

    ## Motion-UI web files installation location
    if [ -z "$WWW_DIR" ];then
        echo -e "\n➤ Specify Motion-UI web sources installation path (default is /var/www/motionui)"
        echo -e "  ${YELLOW}You will have to set up a vhost to serve this location.${RESET}"
        echo -n "  Leave empty to use default directory or specify a location: "; read -p "" WWW_DIR

        if [ -z "$WWW_DIR" ];then
            WWW_DIR="/var/www/motionui"
        fi
    fi

    if [ -d "$WWW_DIR" ];then
        if [ "$ASSUME_YES" == "false" ];then
            echo -n "  Webdir ${YELLOW}${WWW_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no) : "; read -p "" CONFIRM

            if [ "$CONFIRM" != "yes" ];then
                exit
            fi
        fi
    fi

    if [ -d "$DATA_DIR" ];then
        if [ "$ASSUME_YES" == "false" ];then
            echo -n "  Datadir ${YELLOW}${DATA_DIR}${RESET} already exists, its content will be deleted. Confirm (yes/no) : "; read -p "" CONFIRM

            if [ "$CONFIRM" != "yes" ];then
                exit
            fi
        fi
    fi
    
    # Delete webdir and datadir content
    rm "$WWW_DIR" -rf
    rm "$DATA_DIR" -rf

    # Create webdir and datadir
    mkdir -p "$WWW_DIR"
    mkdir -p "$DATA_DIR"
    mkdir -p "$DATA_DIR/events"

    # Copy web sources
    cp -r ${PWD}/www/* ${WWW_DIR}/

    # Copy events and service files
    cp -r ${PWD}/tools ${DATA_DIR}/

    # Copy this script
    cp ${PWD}/motionui ${DATA_DIR}/motionui


    #### CONFIGURATION ####

    detectWebUser

    # Create motionui group
    if ! grep -q "motionui" /etc/group;then
        groupadd motionui
    fi

    # Add webserver and motion user to the group
    usermod -G motionui "$WWW_USER"
    usermod -G motionui motion

    echo -e "\n➤ Motion-UI is using a systemd service to execute regular tasks, such as:"
    echo "  - checking for new version availability"
    echo "  - sending alerts on motion"
    echo "  - autostart and stop motion on time slots or on device presence detection"

    deployService

    echo -e "\n ${GREEN}Installation success!${RESET}"
    echo -e " You can login once you have completed your webserver configuration."
    echo -e " Login     :  ${YELLOW}admin${RESET}"
    echo -e " Password  :  ${YELLOW}motionui${RESET}\n"
}


echo '
                 __  .__                              .__ 
   _____   _____/  |_|__| ____   ____            __ __|__|
  /     \ /  _ \   __\  |/  _ \ /    \   ______ |  |  \  |
 |  Y Y  (  <_> )  | |  (  <_> )   |  \ /_____/ |  |  /  |
 |__|_|  /\____/|__| |__|\____/|___|  /         |____/|__|
       \/                           \/                    

'

if [ $# -eq 0 ];then
    help
    exit
fi

while [ $# -ge 1 ];do
    case "$1" in
        --help|-help|-h)
            help
            exit
           ;;
        --root-dir)
            WWW_DIR="$2"
            shift
            ;;
        --data-dir)
            DATA_DIR="$2"
            shift
            ;;
        --web-user)
            WWW_USER="$2"
            shift
            ;;
        --yes|--assume-yes)
            ASSUME_YES="true"
            ;;
        --first-install|--install|-i)
            installation
            permissions
            exit
        ;;
        --set-permissions|--permissions|-p)
            permissions
            exit
        ;;
        --deploy-service|-s)
            deployService
            exit
        ;;
        *)
    esac
    shift
done

exit